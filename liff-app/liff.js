// User service UUID: Change this to your generated service UUID
const USER_SERVICE_UUID         = '89580d13-02cd-4545-8872-cd4e1f7edff9'; // LED, Button
// User service characteristics
const LED_CHARACTERISTIC_UUID   = 'E9062E71-9E62-4BC6-B0D3-35CDCD9B027B';
const BTN_CHARACTERISTIC_UUID   = '62FBD229-6EDD-4D1A-B554-5C4E1BB29169';

// PSDI Service UUID: Fixed value for Developer Trial
const PSDI_SERVICE_UUID         = 'e625601e-9e55-4597-a598-76018a0d293d'; // Device ID
const PSDI_CHARACTERISTIC_UUID  = '26e2b12b-85f0-4f3f-9fdd-91d114270e6e';

// UI settings
let ledState = false; // true: LED on, false: LED off
let clickCount = 0;

let printbuf = [];
let interval = null;
const sendInterval = 60; //PRIMAX暂时使用这个参数writeDataDemoInterval,v14版本后由38=>30
const sendPackage = 20;
let printCnt = 0;

// -------------- //
// On window load //
// -------------- //

window.onload = () => {
    initVConsole();
    initializeApp();
};

// Initialize vConsole
function initVConsole() {
    window.vConsole = new window.VConsole({
        defaultPlugins: ['system', 'network', 'element', 'storage'],
        maxLogNumber: 1000,
        onReady: function() {
            console.log('vConsole is ready.');
        },
        onClearLog: function() {
            console.log('on clearLog');
        }
    });
}

// ----------------- //
// Handler functions //
// ----------------- //

function handlerToggleLed() {
    ledState = !ledState;

    uiToggleLedButton(ledState);
    liffToggleDeviceLedState(ledState);
}

// ------------ //
// UI functions //
// ------------ //

function uiToggleLedButton(state) {
    const el = document.getElementById("btn-led-toggle");
    el.innerText = state ? "Switch LED OFF" : "Switch LED ON";

    if (state) {
      el.classList.add("led-on");
    } else {
      el.classList.remove("led-on");
    }
}

function uiCountPressButton() {
    clickCount++;

    const el = document.getElementById("click-count");
    el.innerText = clickCount;
}

function uiToggleStateButton(pressed) {
    const el = document.getElementById("btn-state");

    if (pressed) {
        el.classList.add("pressed");
        el.innerText = "Pressed";
    } else {
        el.classList.remove("pressed");
        el.innerText = "Released";
    }
}

function uiToggleDeviceConnected(connected) {
    const elStatus = document.getElementById("status");
    const elControls = document.getElementById("controls");

    elStatus.classList.remove("error");

    if (connected) {
        // Hide loading animation
        uiToggleLoadingAnimation(false);
        // Show status connected
        elStatus.classList.remove("inactive");
        elStatus.classList.add("success");
        // elStatus.innerText = "Device connected";
        // Show controls
        // elControls.classList.remove("hidden");
    } else {
        // Show loading animation
        uiToggleLoadingAnimation(true);
        // Show status disconnected
        elStatus.classList.remove("success");
        elStatus.classList.add("inactive");
        elStatus.innerText = "Device disconnected";
        // Hide controls
        // elControls.classList.add("hidden");
    }
}

function uiToggleLoadingAnimation(isLoading) {
    const elLoading = document.getElementById("loading-animation");

    if (isLoading) {
        // Show loading animation
        elLoading.classList.remove("hidden");
    } else {
        // Hide loading animation
        elLoading.classList.add("hidden");
    }
}

function uiStatusError(message, showLoadingAnimation, input) {
    uiToggleLoadingAnimation(showLoadingAnimation);

    const elStatus = document.getElementById("status");
    const elControls = document.getElementById("controls");

    // Show status error
    elStatus.classList.remove("success");
    elStatus.classList.remove("inactive");
    elStatus.classList.add("error");
    elStatus.innerText = input + '\n' + message;

    // Hide controls
    elControls.classList.add("hidden");
}

function makeErrorMsg(errorObj) {
    return "Error\n" + errorObj.code + "\n" + errorObj.message;
}

// -------------- //
// LIFF functions //
// -------------- //

function initializeApp() {
    liff.init(() => initializeLiff(), error => uiStatusError(makeErrorMsg(error), false, 'initializeApp'));
}

function initializeLiff() {
    liff.initPlugins(['bluetooth']).then(() => {
        liffCheckAvailablityAndDo(() => liffRequestDevice());
    }).catch(error => {
        uiStatusError(makeErrorMsg(error), false, 'initializeLiff');
    });
}

function liffCheckAvailablityAndDo(callbackIfAvailable) {
    // Check Bluetooth availability
    liff.bluetooth.getAvailability().then(isAvailable => {
        if (isAvailable) {
            uiToggleDeviceConnected(false);
            callbackIfAvailable();
        } else {
            uiStatusError("Bluetooth not available", true,);
            setTimeout(() => liffCheckAvailablityAndDo(callbackIfAvailable), 10000);
        }
    }).catch(error => {
        uiStatusError(makeErrorMsg(error), false, 'liffCheckAvailablityAndDo');
    });;
}

function liffRequestDevice() {
    liff.bluetooth.requestDevice().then(device => {
        liffConnectToDevice(device);
    }).catch(error => {
        uiStatusError(makeErrorMsg(error), false, 'liffRequestDevice');
    });
}

function liffConnectToDevice(device) {
    device.gatt.connect().then(() => {
        document.getElementById("device-name").innerText = device.name;
        document.getElementById("status").innerText = device.name;
        document.getElementById("device-id").innerText = device.id;

        // Show status connected
        uiToggleDeviceConnected(true);

        // Get service
        device.gatt.getPrimaryService(USER_SERVICE_UUID).then(service => {
            liffGetUserService(service);
        }).catch(error => {
            uiStatusError(makeErrorMsg(error), false, 'liffGetUserService');
        });
        device.gatt.getPrimaryService(PSDI_SERVICE_UUID).then(service => {
            liffGetPSDIService(service);
        }).catch(error => {
            uiStatusError(makeErrorMsg(error), false, 'liffGetPSDIService');
        });

        // Device disconnect callback
        const disconnectCallback = () => {
            // Show status disconnected
            uiToggleDeviceConnected(false);

            // Remove disconnect callback
            device.removeEventListener('gattserverdisconnected', disconnectCallback);

            // Reset LED state
            ledState = false;
            // Reset UI elements
            uiToggleLedButton(false);
            uiToggleStateButton(false);

            // Try to reconnect
            initializeLiff();
        };

        device.addEventListener('gattserverdisconnected', disconnectCallback);
    }).catch(error => {
        uiStatusError(makeErrorMsg(error), false, 'addEventListener');
    });
}

function liffGetUserService(service) {
    // Button pressed state
    service.getCharacteristic(BTN_CHARACTERISTIC_UUID).then(characteristic => {
        liffGetButtonStateCharacteristic(characteristic);
    }).catch(error => {
        uiStatusError(makeErrorMsg(error), false, 'liffGetButtonStateCharacteristic');
    });

    // Toggle LED
    service.getCharacteristic(LED_CHARACTERISTIC_UUID).then(characteristic => {
        window.ledCharacteristic = characteristic;

        // Switch off by default
        liffToggleDeviceLedState(false);
    }).catch(error => {
        uiStatusError(makeErrorMsg(error), false, 'liffToggleDeviceLedState');
    });
}

function liffGetPSDIService(service) {
    // Get PSDI value
    service.getCharacteristic(PSDI_CHARACTERISTIC_UUID).then(characteristic => {
        return characteristic.readValue();
    }).then(value => {
        // Byte array to hex string
        const psdi = new Uint8Array(value.buffer)
            .reduce((output, byte) => output + ("0" + byte.toString(16)).slice(-2), "");
        document.getElementById("device-psdi").innerText = psdi;
    }).catch(error => {
        uiStatusError(makeErrorMsg(error), false, 'liffGetPSDIService');
    });
}

function liffGetButtonStateCharacteristic(characteristic) {
    // Add notification hook for button state
    // (Get notified when button state changes)
    characteristic.startNotifications().then(() => {
        characteristic.addEventListener('characteristicvaluechanged', e => {
            const val = (new Uint8Array(e.target.value.buffer))[0];
            if (val > 0) {
                // press
                uiToggleStateButton(true);
            } else {
                // release
                uiToggleStateButton(false);
                uiCountPressButton();
            }
        });
    }).catch(error => {
        uiStatusError(makeErrorMsg(error), false);
    });
}

function liffToggleDeviceLedState(state) {
    // on: 0x01
    // off: 0x00
    window.ledCharacteristic.writeValue(
        state ? new Uint8Array([0x01]) : new Uint8Array([0x00])
    ).catch(error => {
        uiStatusError(makeErrorMsg(error), false);
    });
}

function print_1() {
    window.ledCharacteristic.writeValue(
        new Uint8Array([0x01])
    ).catch(error => {
        uiStatusError(makeErrorMsg(error), false);
    });
}

function print_2() {
    // window.ledCharacteristic.writeValue(
    //     new Uint8Array([0x02])
    // ).catch(error => {
    //     uiStatusError(makeErrorMsg(error), false);
    // });
    let dataArr = [0xA5,0x00,0x00,0x05,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1B,0x40,0x1B,0x69,0x61,0x01,0x1B,0x69,0x21,0x01,0x1B,0x69,0x55,0x4A,0x00,0x0C,0xA0,0xD3,0xC1,0x1F,0x83,0x02,0x00,0x00,0x04,0x00,0x00,0x00,0x1B,0x69,0x7A,0x84,0x00,0x0C,0x00,0xBA,0x00,0x00,0x00,0x00,0x00,0x1B,0x69,0x4D,0x40,0x1B,0x69,0x4B,0x08,0x1B,0x69,0x64,0x0E,0x00,0x4D,0x02,0x47,0x02,0x00,0xF1,0x00,0x5A,0x5A,0x5A,0x5A,0x5A,0x5A,0x5A,0x5A,0x5A,0x5A,0x5A,0x5A,0x5A,0x5A,0x5A,0x5A,0x5A,0x47,0x07,0x00,0xF9,0x00,0x01,0x1F,0xE0,0xFB,0x00,0x47,0x07,0x00,0xF9,0x00,0x01,0xFF,0xF8,0xFB,0x00,0x47,0x08,0x00,0xFA,0x00,0x02,0x03,0xFF,0xFC,0xFB,0x00,0x47,0x08,0x00,0xFA,0x00,0x02,0x1F,0xE0,0x3E,0xFB,0x00,0x47,0x08,0x00,0xFA,0x00,0x02,0x3F,0x00,0x1F,0xFB,0x00,0x47,0x0A,0x00,0xFB,0x00,0x04,0x01,0xFC,0x00,0x0F,0x80,0xFC,0x00,0x47,0x0A,0x00,0xFB,0x00,0x04,0x03,0xF0,0x00,0x07,0x80,0xFC,0x00,0x47,0x0A,0x00,0xFB,0x00,0x04,0x07,0xE0,0x00,0x03,0x80,0xFC,0x00,0x47,0x0A,0x00,0xFB,0x00,0x04,0x0F,0x80,0x00,0x03,0x80,0xFC,0x00,0x47,0x0A,0x00,0xFB,0x00,0x04,0x1E,0x80,0x00,0x03,0xC0,0xFC,0x00,0x47,0x0B,0x00,0xFB,0x00,0x00,0x1E,0xFF,0x00,0x01,0x03,0x80,0xFC,0x00,0x47,0x0B,0x00,0xFB,0x00,0x00,0x1E,0xFF,0x00,0x01,0x03,0xC0,0xFC,0x00,0x47,0x0B,0x00,0xFB,0x00,0x00,0x3C,0xFF,0x00,0x01,0x03,0x80,0xFC,0x00,0x47,0x0B,0x00,0xFB,0x00,0x00,0x38,0xFF,0x00,0x01,0x03,0x80,0xFC,0x00,0x47,0x0B,0x00,0xFB,0x00,0x00,0x78,0xFF,0x00,0x01,0x03,0x80,0xFC,0x00,0x47,0x0B,0x00,0xFB,0x00,0x00,0x7C,0xFF,0x00,0x01,0x03,0x80,0xFC,0x00,0x47,0x0B,0x00,0xFB,0x00,0x00,0x3E,0xFF,0x00,0x01,0x03,0x80,0xFC,0x00,0x47,0x0A,0x00,0xFB,0x00,0x00,0x1E,0xFF,0x00,0x00,0x07,0xFB,0x00,0x47,0x0A,0x00,0xFB,0x00,0x00,0x0C,0xFF,0x00,0x00,0x07,0xFB,0x00,0x47,0x06,0x00,0xF8,0x00,0x00,0x06,0xFB,0x00,0x47,0x06,0x00,0xF8,0x00,0x00,0x0E,0xFB,0x00,0x47,0x06,0x00,0xF8,0x00,0x00,0x0C,0xFB,0x00,0x47,0x06,0x00,0xF8,0x00,0x00,0x0C,0xFB,0x00,0x47,0x06,0x00,0xF7,0x00,0x00,0x80,0xFC,0x00,0x47,0x07,0x00,0xF8,0x00,0x01,0x07,0xC0,0xFC,0x00,0x47,0x07,0x00,0xF8,0x00,0x01,0x1F,0xC0,0xFC,0x00,0x47,0x08,0x00,0xF9,0x00,0x02,0x01,0xFF,0x80,0xFC,0x00,0x47,0x07,0x00,0xF9,0x00,0x01,0x07,0xFE,0xFB,0x00,0x47,0x07,0x00,0xF9,0x00,0x01,0x07,0xFE,0xFB,0x00,0x47,0x07,0x00,0xF9,0x00,0x01,0x3F,0xF0,0xFB,0x00,0x47,0x07,0x00,0xF9,0x00,0x01,0x7F,0xC0,0xFB,0x00,0x47,0x07,0x00,0xFA,0x00,0x01,0x03,0xFE,0xFA,0x00,0x47,0x07,0x00,0xFA,0x00,0x01,0x0F,0xF8,0xFA,0x00,0x47,0x07,0x00,0xFA,0x00,0x01,0x3F,0xE0,0xFA,0x00,0x47,0x08,0x00,0xFB,0x00,0x02,0x03,0xFF,0xE0,0xFA,0x00,0x47,0x09,0x00,0xFB,0x00,0x03,0x0F,0xFF,0xC3,0xE0,0xFB,0x00,0x47,0x09,0x00,0xFB,0x00,0x03,0xFF,0xF3,0xFF,0xF0,0xFB,0x00,0x47,0x09,0x00,0xFB,0x00,0x03,0xFF,0x87,0xFF,0xF8,0xFB,0x00,0x47,0x09,0x00,0xFB,0x00,0x03,0xF8,0x07,0xFE,0xF8,0xFB,0x00,0x47,0x09,0x00,0xFB,0x00,0x03,0x40,0x03,0xF0,0xF8,0xFB,0x00,0x47,0x08,0x00,0xFA,0x00,0x02,0x03,0x00,0xF0,0xFB,0x00,0x47,0x06,0x00,0xF8,0x00,0x00,0xF0,0xFB,0x00,0x47,0x07,0x00,0xF9,0x00,0x01,0x01,0xE0,0xFB,0x00,0x47,0x07,0x00,0xF9,0x00,0x01,0x03,0xE0,0xFB,0x00,0x47,0x07,0x00,0xF9,0x00,0x01,0x07,0xC0,0xFB,0x00,0x47,0x06,0x00,0xF9,0x00,0x00,0x07,0xFA,0x00,0x47,0x06,0x00,0xF9,0x00,0x00,0x07,0xFA,0x00,0x5A,0x5A,0x5A,0x5A,0x47,0x07,0x00,0xF9,0x00,0x01,0x07,0xF8,0xFB,0x00,0x47,0x07,0x00,0xF9,0x00,0x01,0x1F,0xFE,0xFB,0x00,0x47,0x07,0x00,0xF9,0x00,0x01,0x3F,0xFF,0xFB,0x00,0x47,0x08,0x00,0xF9,0x00,0x02,0xFF,0xCF,0x80,0xFC,0x00,0x47,0x08,0x00,0xF9,0x00,0x02,0xFB,0xC7,0x80,0xFC,0x00,0x47,0x09,0x00,0xFA,0x00,0x03,0x01,0xE3,0x83,0x80,0xFC,0x00,0x47,0x09,0x00,0xFA,0x00,0x03,0x03,0xC7,0x03,0xC0,0xFC,0x00,0x47,0x09,0x00,0xFA,0x00,0x03,0x07,0x8E,0x03,0x80,0xFC,0x00,0x47,0x09,0x00,0xFA,0x00,0x03,0x07,0x9E,0x03,0x80,0xFC,0x00,0x47,0x09,0x00,0xFA,0x00,0x03,0x07,0x3C,0x07,0x80,0xFC,0x00,0x47,0x08,0x00,0xFA,0x00,0x02,0x0F,0x78,0x07,0xFB,0x00,0x47,0x08,0x00,0xFA,0x00,0x02,0x0F,0xF0,0x0F,0xFB,0x00,0x47,0x08,0x00,0xFA,0x00,0x02,0x07,0xE0,0x0E,0xFB,0x00,0x47,0x08,0x00,0xFA,0x00,0x02,0x07,0xC0,0x0C,0xFB,0x00,0x47,0x08,0x00,0xFA,0x00,0x02,0x07,0xC0,0x0C,0xFB,0x00,0x47,0x08,0x00,0xFA,0x00,0x02,0x03,0x80,0x08,0xFB,0x00,0x5A,0x5A,0x5A,0x5A,0x5A,0x5A,0x47,0x06,0x00,0xF8,0x00,0x00,0x80,0xFB,0x00,0x47,0x07,0x00,0xF9,0x00,0x01,0x0F,0xFC,0xFB,0x00,0x47,0x07,0x00,0xF9,0x00,0x01,0x3F,0xFE,0xFB,0x00,0x47,0x06,0x00,0xF9,0x00,0xFF,0xFF,0xFB,0x00,0x47,0x09,0x00,0xFA,0x00,0x03,0x01,0xFC,0x1F,0x80,0xFC,0x00,0x47,0x09,0x00,0xFA,0x00,0x03,0x03,0xE0,0x07,0x80,0xFC,0x00,0x47,0x09,0x00,0xFA,0x00,0x03,0x03,0xC0,0x07,0x80,0xFC,0x00,0x47,0x09,0x00,0xFA,0x00,0x03,0x07,0x80,0x03,0xC0,0xFC,0x00,0x47,0x09,0x00,0xFA,0x00,0x03,0x07,0x00,0x03,0x80,0xFC,0x00,0x47,0x09,0x00,0xFA,0x00,0x03,0x0F,0x00,0x03,0x80,0xFC,0x00,0x47,0x09,0x00,0xFA,0x00,0x03,0x0F,0x00,0x03,0xC0,0xFC,0x00,0x47,0x09,0x00,0xFA,0x00,0x03,0x0F,0x00,0x03,0x80,0xFC,0x00,0x47,0x09,0x00,0xFA,0x00,0x03,0x0F,0x20,0x03,0x80,0xFC,0x00,0x47,0x09,0x00,0xFA,0x00,0x03,0x0F,0xF0,0x03,0x80,0xFC,0x00,0x47,0x09,0x00,0xFA,0x00,0x03,0x07,0xF0,0x07,0x80,0xFC,0x00,0x47,0x08,0x00,0xFA,0x00,0x02,0x03,0xE0,0x0F,0xFB,0x00,0x47,0x08,0x00,0xFA,0x00,0x02,0x01,0xC0,0x0E,0xFB,0x00,0x47,0x06,0x00,0xF8,0x00,0x00,0x1C,0xFB,0x00,0x5A,0x5A,0x5A,0x47,0x06,0x00,0xF8,0x00,0x00,0x30,0xFB,0x00,0x47,0x07,0x00,0xF9,0x00,0x01,0x07,0xFF,0xFB,0x00,0x47,0x08,0x00,0xF9,0x00,0x02,0x3F,0xFF,0xC0,0xFC,0x00,0x47,0x0A,0x00,0xFA,0x00,0x00,0x01,0xFF,0xFF,0x00,0xC0,0xFC,0x00,0x47,0x09,0x00,0xFA,0x00,0x03,0x0F,0xFE,0x0F,0x80,0xFC,0x00,0x47,0x08,0x00,0xFA,0x00,0x02,0x7F,0xF0,0x3F,0xFB,0x00,0x47,0x09,0x00,0xFB,0x00,0x03,0x07,0xFF,0xF8,0x3C,0xFB,0x00,0x47,0x08,0x00,0xFB,0x00,0xFF,0xFF,0x00,0x7C,0xFA,0x00,0x47,0x08,0x00,0xFB,0x00,0xFF,0xFF,0x00,0x78,0xFA,0x00,0x47,0x08,0x00,0xFB,0x00,0x02,0xFF,0xCE,0x3C,0xFA,0x00,0x47,0x08,0x00,0xFB,0x00,0x02,0x7C,0x1E,0x3C,0xFA,0x00,0x47,0x08,0x00,0xFB,0x00,0x02,0x60,0x3C,0x1C,0xFA,0x00,0x47,0x07,0x00,0xFA,0x00,0x01,0x78,0x1C,0xFA,0x00,0x47,0x07,0x00,0xFA,0x00,0x01,0x70,0x1C,0xFA,0x00,0x47,0x08,0x00,0xFB,0x00,0x02,0x01,0xF0,0x1C,0xFA,0x00,0x47,0x08,0x00,0xFB,0x00,0x02,0x03,0xE0,0x3C,0xFA,0x00,0x47,0x08,0x00,0xFB,0x00,0x02,0x07,0xC0,0x38,0xFA,0x00,0x47,0x08,0x00,0xFB,0x00,0x02,0x07,0x80,0x38,0xFA,0x00,0x47,0x08,0x00,0xFB,0x00,0x02,0x07,0x80,0x38,0xFA,0x00,0x47,0x08,0x00,0xFB,0x00,0x02,0x02,0x00,0x38,0xFA,0x00,0x47,0x06,0x00,0xF9,0x00,0x00,0x78,0xFA,0x00,0x47,0x06,0x00,0xF9,0x00,0x00,0x38,0xFA,0x00,0x47,0x06,0x00,0xF9,0x00,0x00,0x38,0xFA,0x00,0x47,0x06,0x00,0xF9,0x00,0x00,0x30,0xFA,0x00,0x47,0x06,0x00,0xF9,0x00,0x00,0x20,0xFA,0x00,0x5A,0x47,0x06,0x00,0xF8,0x00,0x00,0x06,0xFB,0x00,0x47,0x06,0x00,0xF8,0x00,0x00,0x06,0xFB,0x00,0x47,0x06,0x00,0xF8,0x00,0x00,0x07,0xFB,0x00,0x47,0x07,0x00,0xF8,0x00,0x01,0x07,0x80,0xFC,0x00,0x47,0x09,0x00,0xFA,0x00,0x03,0x01,0xF8,0x07,0x80,0xFC,0x00,0x47,0x09,0x00,0xFA,0x00,0x03,0x07,0xFC,0x03,0x80,0xFC,0x00,0x47,0x09,0x00,0xFA,0x00,0x03,0x0F,0xF8,0x01,0xC0,0xFC,0x00,0x47,0x09,0x00,0xFA,0x00,0x03,0x3F,0xC0,0x00,0x80,0xFC,0x00,0x47,0x06,0x00,0xFA,0x00,0x00,0x3E,0xF9,0x00,0x47,0x06,0x00,0xFA,0x00,0x00,0x18,0xF9,0x00,0x5A,0x5A,0x5A,0x5A,0x5A,0x5A,0x5A,0x5A,0x5A,0x5A,0x5A,0x5A,0x5A,0x5A,0x5A,0x5A,0x5A,0x5A,0x5A,0x5A,0x5A,0x5A,0x5A,0x5A,0x5A,0x5A,0x5A,0x5A,0x5A,0x5A,0x5A,0x5A,0x5A,0x5A,0x5A,0x5A,0x5A,0x5A,0x1A];
    sendData(dataArr, ()=> {
        // TODO
    });
}

function sendData(dataArr, callBack) {
    interval = null;
    printbuf = dataArr;
    interval = setInterval(writeDataDemoInterval, sendInterval, callBack);
}

function writeTransferData(buffer, callBack) {
    window.ledCharacteristic.writeValue(
        new Uint8Array(buffer)
    ).catch(error => {
        if (interval != null) {
            clearInterval(interval);
            interval = null;
        }
        initSendPara();
        uiStatusError(makeErrorMsg(error), false);
    });
  }

//setinterval发送
function writeDataDemoInterval(callBack) {
    if (printbuf.length <= 0) {
      if (interval != null) {
        clearInterval(interval);
        interval = null;
      }
      return;
    }
    let buf;
    if (printCnt + sendPackage <= printbuf.length) {
      buf = printbuf.slice(printCnt, printCnt + sendPackage);
    } else {
      buf = printbuf.slice(printCnt, printbuf.length);
    }
    printCnt += sendPackage;
    let buffer = new ArrayBuffer(buf.length);
    let dataView = new DataView(buffer);
    for (let j = 0; j < buf.length; j++) {
      dataView.setInt8(j, buf[j]);
    }
    writeTransferData(buffer, callBack)
    sendComplated(printCnt, callBack);
  }
  
  function sendComplated(printCnt, callBack) {
    if (printCnt) {
      if (printCnt >= printbuf.length) { //发送完成
        if (interval != null) {
          clearInterval(interval);
          interval = null;
        }
        let s = 'printdata send complete：datasize:' + (printbuf.length).toString() + 'byte';
        console.log(s);
        initSendPara();
        // callBack(0, null);
      }
    }
  }

  function initSendPara() {
    // isInPrinting = false;
    printbuf = [];
    printCnt = 0;
  }